name: CI/CD Pipeline

# Trigger the workflow on push to the main branch
on:
  push:
    branches:
      - main  # Change to the branch you want to trigger the pipeline

jobs:
  build:
    runs-on: ubuntu-latest  # Use an Ubuntu runner for the build

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub (or other registry)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build Docker images for frontend and backend
    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.yml build

    # Step 5: Push Docker images to Docker Hub (or GCR)
    - name: Push Docker images
      run: |
        docker-compose -f docker-compose.yml push

  deploy:
    runs-on: ubuntu-latest  # Use an Ubuntu runner for deployment

    needs: build  # Ensure this job runs after the build job

    steps:
    # Step 1: Checkout code again in the deploy job
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up SSH to connect to the GCP VM
    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}

    # Step 3: Deploy the Dockerized app to the GCP VM
    - name: Deploy to GCP VM
      run: |
        ssh -o StrictHostKeyChecking=no user@${{ secrets.GCP_VM_IP }} << 'EOF'
          cd /opt/store-management-app
          docker-compose pull
          docker-compose up -d
        EOF

    # Step 4: Notify or check the deployment
    - name: Check Deployment Status
      run: |
        ssh -o StrictHostKeyChecking=no user@${{ secrets.GCP_VM_IP }} 'docker ps'

