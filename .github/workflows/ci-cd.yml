name: CI/CD Pipeline for Azure Blob Storage

on:
  push:
    branches:
      - main  # You can change this to your default branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # GitHub runner for initial steps
    environment: production  # You can customize your environment name

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Node.js (example for a Node.js project)
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # Specify the Node.js version you are using

      # Install dependencies and build the project
      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      # Log in to Azure using Service Principal
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      # Upload build artifacts to Azure Blob Storage
      - name: Upload artifacts to Azure Blob Storage
        run: |
          # Install Azure CLI if not already installed
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          
          # Log in to Azure CLI
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

          # Upload the build output to the Azure Storage container
          az storage blob upload-batch \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }} \
            --destination ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }} \
            --source ./build/  # Path to your build artifacts folder

      # Step 7: Set up GCP VM for build process
      - name: Set up GCP VM
        run: |
          # Install Google Cloud SDK if not already installed
          curl -sSL https://sdk.cloud.google.com | bash
          source ~/.bashrc

          # Authenticate with the Google Cloud service account using key file
          echo ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }} > /tmp/gcp-key.json
          gcloud auth activate-service-account --key-file=/tmp/gcp-key.json

          # Set GCP project (replace with your project ID)
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

          # SSH into the GCP VM and trigger the build process (you can customize this step)
          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} --zone ${{ secrets.GCP_ZONE }} --command "
            cd /opt/store-management-app &&
            npm install &&
            npm run build
          "

      # Step 8: Complete Job
      - name: Complete Job
        run: echo "CI/CD pipeline completed successfully!"

      # Optional: Clean up
      - name: Clean up Azure session
        run: az logout
